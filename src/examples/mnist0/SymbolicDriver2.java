package mnist0;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import gov.nasa.jpf.symbc.Debug;
import gov.nasa.jpf.symbc.DNN;
import gov.nasa.jpf.symbc.DNNDataGeneralize;
import gov.nasa.jpf.symbc.DNNGeneralize;
public class SymbolicDriver2 {
	static final int IMG_HEIGHT = 28;
	static final int IMG_WIDTH = 28; 
	static String originalconstraints="4.006419237482989\n" + 
			"-6.238381587946433\n" + 
			sym0 -0.025913992896676064) sym0) 0.0) -0.004893668927252293) ( *  ( +  ( +  sym1 0.004660026635974646) sym1) 0.0)) ( *  ( +  ( +  sym2 -0.04671521112322807) sym2) 0.0)) ( *  ( +  ( +  sym3 0.023962199687957764) sym3) 0.0)) ( *  ( +  ( +  sym4 -0.018237972632050514) sym4) 2.8236622407454055)) ( *  ( +  ( +  sym5 -0.06838005781173706) sym5) 5.958544222090965)) ( *  ( +  ( +  sym6 -0.019054973497986794) sym6) 0.0)) ( *  ( +  ( +  sym7 0.017473235726356506) sym7) 11.93315355371805)) ( *  ( +  ( +  sym8 0.012096472084522247) sym8) 0.0)) ( *  ( +  ( +  sym9 0.050470173358917236) sym9) 0.0)) ( *  ( +  ( +  sym10 -0.12232530862092972) sym10) 15.49205404720699)) ( *  ( +  ( +  sym11 -0.000639490550383925) sym11) 0.0)) ( *  ( +  ( +  sym12 0.024605529382824898) sym12) 0.0)) ( *  ( +  ( +  sym13 0.06439061462879181) sym13) 1.9683170494964306)) ( *  ( +  ( +  sym14 0.0734543725848198) sym14) 0.0)) ( *  ( +  ( +  sym15 -0.001515701529569924) sym15) 10.746043976753938)) ( *  ( +  ( +  sym16 0.009252896532416344) sym16) 8.134933873010349)) ( *  ( +  ( +  sym17 0.05792611092329025) sym17) 0.0)) ( *  ( +  ( +  sym18 -0.04537682235240936) sym18) 18.778816502225737)) ( *  ( +  ( +  sym19 -0.02677113190293312) sym19) 0.0)) ( *  ( +  ( +  sym20 0.06762924790382385) sym20) 4.130380838533269)) ( *  ( +  ( +  sym21 0.018550245091319084) sym21) 10.836067467571633)) ( *  ( +  ( +  sym22 0.019932355731725693) sym22) 0.0)) ( *  ( +  ( +  sym23 0.02735784277319908) sym23) 6.144103205615968)) ( *  ( +  ( +  sym24 0.0366978757083416) sym24) 0.8819346862059191)) ( *  ( +  ( +  sym25 0.05535871908068657) sym25) 0.0)) ( *  ( +  ( +  sym26 -0.04718729853630066) sym26) 0.0)) ( *  ( +  ( +  sym27 -0.011597681790590286) sym27) 8.11898659960033)) ( *  ( +  ( +  sym28 -0.04482943192124367) sym28) 0.0)) ( *  ( +  ( +  sym29 0.05634056404232979) sym29) 0.6344615179561539)) ( *  ( +  ( +  sym30 0.000197692454094067) sym30) 12.053749779912316)) ( *  ( +  ( +  sym31 0.003447494236752391) sym31) 8.736106095287832)) ( *  ( +  ( +  sym32 0.03324217349290848) sym32) 3.947519448933058)) ( *  ( +  ( +  sym33 -0.030890248715877533) sym33) 0.0)) ( *  ( +  ( +  sym34 0.04026607424020767) sym34) 15.602644778340863)) ( *  ( +  ( +  sym35 0.024163836613297462) sym35) 9.197707098444006)) ( *  ( +  ( +  sym36 -0.10274405032396317) sym36) 6.68380546439531)) ( *  ( +  ( +  sym37 -0.02950153686106205) sym37) 16.46185782804217)) ( *  ( +  ( +  sym38 0.017364714294672012) sym38) 0.0)) ( *  ( +  ( +  sym39 -0.025822004303336143) sym39) 17.65572244056714)) ( *  ( +  ( +  sym40 -0.012415923178195953) sym40) 0.0)) ( *  ( +  ( +  sym41 0.03965158388018608) sym41) 0.0)) ( *  ( +  ( +  sym42 -0.000965705199632794) sym42) 14.584246750154316)) ( *  ( +  ( +  sym43 0.001678278553299606) sym43) 5.381206338775931)) ( *  ( +  ( +  sym44 0.007332862354815006) sym44) 0.0)) ( *  ( +  ( +  sym45 -0.028348727151751518) sym45) 0.0)) ( *  ( +  ( +  sym46 0.02004927583038807) sym46) 0.0)) ( *  ( +  ( +  sym47 0.055745456367731094) sym47) 19.648627648551063)) ( *  ( +  ( +  sym48 -0.02519414946436882) sym48) 0.0)) ( *  ( +  ( +  sym49 -0.04262924566864967) sym49) 4.175729718386116)) ( *  ( +  ( +  sym50 -0.05532555282115936) sym50) 0.0)) ( *  ( +  ( +  sym51 0.04342358931899071) sym51) 2.5059138523609015)) ( *  ( +  ( +  sym52 -0.043390125036239624) sym52) 0.0)) ( *  ( +  ( +  sym53 -0.003397854045033455) sym53) 0.0)) ( *  ( +  ( +  sym54 0.0394568145275116) sym54) 13.206163639039522)) ( *  ( +  ( +  sym55 -0.005316402763128281) sym55) 0.0)) ( *  ( +  ( +  sym56 -0.043265730142593384) sym56) 0.0)) ( *  ( +  ( +  sym57 -0.026860110461711884) sym57) 0.0)) ( *  ( +  ( +  sym58 0.015248899348080158) sym58) 0.0)) ( *  ( +  ( +  sym59 0.024689029902219772) sym59) 0.0)) ( *  ( +  ( +  sym60 -0.006655588746070862) sym60) 0.0)) ( *  ( +  ( +  sym61 0.03593971207737923) sym61) 0.0)) ( *  ( +  ( +  sym62 0.04838326945900917) sym62) 7.048938647849356)) ( *  ( +  ( +  sym63 0.001711200573481619) sym63) 7.694094809633935)) ( *  ( +  ( +  sym64 0.03966167941689491) sym64) 6.001134555671485)) ( *  ( +  ( +  sym65 -0.04120185598731041) sym65) 0.0)) ( *  ( +  ( +  sym66 0.0623401440680027) sym66) 0.0)) ( *  ( +  ( +  sym67 -0.11309854686260223) sym67) 0.0)) ( *  ( +  ( +  sym68 -0.03929271176457405) sym68) 0.0)) ( *  ( +  ( +  sym69 0.024673938751220703) sym69) 0.0)) ( *  ( +  ( +  sym70 -0.020577149465680122) sym70) 0.0)) ( *  ( +  ( +  sym71 0.014723258092999458) sym71) 5.279233861408939)) ( *  ( +  ( +  sym72 -0.007503549102693796) sym72) 0.0)) ( *  ( +  ( +  sym73 -0.06424223631620407) sym73) 0.0)) ( *  ( +  ( +  sym74 0.060128550976514816) sym74) 3.1086224680946932)) ( *  ( +  ( +  sym75 -0.008441234938800335) sym75) 9.134478405598392)) ( *  ( +  ( +  sym76 0.028626849874854088) sym76) 0.782015442703156)) ( *  ( +  ( +  sym77 0.030278939753770828) sym77) 3.6499184920726835)) ( *  ( +  ( +  sym78 0.03426748886704445) sym78) 11.923611611592252)) ( *  ( +  ( +  sym79 0.050610024482011795) sym79) 0.0)) ( *  ( +  ( +  sym80 -0.0427810475230217) sym80) 0.0)) ( *  ( +  ( +  sym81 0.03230622038245201) sym81) 9.75900277767262)) ( *  ( +  ( +  sym82 -0.02046510949730873) sym82) 12.588720467832967)) ( *  ( +  ( +  sym83 -0.06909351795911789) sym83) 0.0)) ( *  ( +  ( +  sym84 0.03724778816103935) sym84) 0.0)) ( *  ( +  ( +  sym85 0.03160623088479042) sym85) 15.391110277643396)) ( *  ( +  ( +  sym86 0.016432559117674828) sym86) 0.0)) ( *  ( +  ( +  sym87 -0.007013196591287851) sym87) 0.0)) ( *  ( +  ( +  sym88 0.007313993759453297) sym88) 0.0)) ( *  ( +  ( +  sym89 0.035509657114744186) sym89) 12.083364650992596)) ( *  ( +  ( +  sym90 0.03867872804403305) sym90) 0.0)) ( *  ( +  ( +  sym91 0.055077098309993744) sym91) 4.356339175571858)) ( *  ( +  ( +  sym92 -0.06460782885551453) sym92) 5.956203837289288)) ( *  ( +  ( +  sym93 0.04749586433172226) sym93) 11.672500175057431)) ( *  ( +  ( +  sym94 0.022049270570278168) sym94) 5.51504735687371)) ( *  ( +  ( +  sym95 -0.05000802129507065) sym95) 0.0)) ( *  ( +  ( +  sym96 0.0676833838224411) sym96) 6.037145036097237)) ( *  ( +  ( +  sym97 -0.0389840267598629) sym97) 0.0)) ( *  ( +  ( +  sym98 -0.054474376142024994) sym98) 0.0)) ( *  ( +  ( +  sym99 0.05018996819853783) sym99) 0.0)) ( *  ( +  ( +  sym100 -0.002996742492541671) sym100) 21.56472320962372)) ( *  ( +  ( +  sym101 0.001628727884963155) sym101) 1.639959621104868)) ( *  ( +  ( +  sym102 -0.017613308504223824) sym102) 0.0)) ( *  ( +  ( +  sym103 -0.015494938008487225) sym103) 0.0)) ( *  ( +  ( +  sym104 0.07285290211439133) sym104) 14.227146843969832)) ( *  ( +  ( +  sym105 0.00359567697159946) sym105) 13.446219108741362)) ( *  ( +  ( +  sym106 -0.034781936556100845) sym106) 2.550131838760013)) ( *  ( +  ( +  sym107 -0.026741022244095802) sym107) 0.0)) ( *  ( +  ( +  sym108 -0.0424642451107502) sym108) 0.0)) ( *  ( +  ( +  sym109 -0.002912053605541587) sym109) 14.568172555556208)) ( *  ( +  ( +  sym110 0.04984259605407715) sym110) 24.491977962292157)) ( *  ( +  ( +  sym111 0.005866890773177147) sym111) 0.0)) ( *  ( +  ( +  sym112 -0.007344326470047235) sym112) 0.0)) ( *  ( +  ( +  sym113 -0.05668842792510986) sym113) 7.0353576900968)) ( *  ( +  ( +  sym114 0.03661476448178291) sym114) 19.04776373652803)) ( *  ( +  ( +  sym115 0.044020991772413254) sym115) 2.3859082282266075)) ( *  ( +  ( +  sym116 -0.02298927865922451) sym116) 11.73501492673358)) ( *  ( +  ( +  sym117 -0.034327372908592224) sym117) 11.147693651049188)) ( *  ( +  ( +  sym118 -0.006110604852437973) sym118) 1.6583439179087414)) ( *  ( +  ( +  sym119 -0.05375603958964348) sym119) 3.354800188616287)) ( *  ( +  ( +  sym120 0.040332596749067307) sym120) 0.0)) ( *  ( +  ( +  sym121 -0.04156377166509628) sym121) 0.0)) ( *  ( +  ( +  sym122 -0.09500296413898468) sym122) 2.09276337658811)) ( *  ( +  ( +  sym123 -0.05372776463627815) sym123) 6.99609690673836)) ( *  ( +  ( +  sym124 -0.027521608397364616) sym124) 10.74911151505846)) ( *  ( +  ( +  sym125 0.03533131629228592) sym125) 0.0)) ( *  ( +  ( +  sym126 0.012402061372995377) sym126) 8.865748549424062)) ( *  ( +  ( +  sym127 0.023409251123666763) sym127) 0.0))\n" + 
			"3.3787089054491863\n" + 
			"-6.4307074131382\n" + 
			"6.548742353100598\n" + 
			"-10.283043989919141\n" + 
			"-3.7901281496834662\n" + 
			"-1.1121542573927146\n" + 
			"-0.03465937441360678\n";
	public static void main(String[] args) throws  Exception {
		String inputFile = DNNt.path+"inputs\\inn25.txt";
		File file = new File(inputFile); 
		BufferedReader br = new BufferedReader(new FileReader(file)); 
		double[][][] a = new double[IMG_HEIGHT][IMG_WIDTH][1];
		String st;
		while ((st = br.readLine()) != null) {
			String[] values = st.split(",");
			int index = 0;
			while (index < values.length) {
				for (int i = 0; i <  IMG_HEIGHT; i++)
					for (int j = 0; j < IMG_WIDTH; j++)
						for (int k = 0; k < 1; k++)
						{
							Double val = Double.valueOf(values[index]);
							index++;
							a[i][j][k] = (double)(val);
						}
			}
		}
		int original=0;
		mnist0.DNNt model = new mnist0.DNNt();    
		if(original==1) {
			System.out.println("OLD IMPLEMENTATION");
			DNN.readDataFromFiles(DNNt.path+"params\\");
			model.biases0 = DNN.getBiases0();
			model.biases2 = DNN.getBiases2();
			model.biases6 = DNN.getBiases6();
			model.biases8 = DNN.getBiases8();
			model.weights0 = DNN.getWeights0();
			model.weights2 = DNN.getWeights2();
			model.weights6 = DNN.getWeights6();
			model.weights8 = DNN.getWeights8();
		}
		else
		{
			System.out.println("NEW IMPLEMENTATION");
			DNNGeneralize.readDataFromFiles(DNNt.path+"params\\",DNNt.path+"mnist0.json");
			model.biases0 = (double[]) DNNGeneralize.get_data("biases0");
			model.biases2 = (double[]) DNNGeneralize.get_data("biases2");
			model.biases6 = (double[]) DNNGeneralize.get_data("biases6");
			model.biases8 = (double[]) DNNGeneralize.get_data("biases8");
			model.weights0 = (double[][][][]) DNNGeneralize.get_data("weights0");
			model.weights2 = (double[][][][]) DNNGeneralize.get_data("weights2");
			model.weights6 = (double[][]) DNNGeneralize.get_data("weights6");
			model.weights8 = (double[][]) DNNGeneralize.get_data("weights8");
		}
		int label = model.run(a,2);
		System.out.println(DNNt.generatedconstraints);
		assert(DNNt.generatedconstraints.equals(originalconstraints));
		System.out.println("Test 2 Passed");
	}
}
