package mnist0;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import gov.nasa.jpf.symbc.Debug;
import gov.nasa.jpf.symbc.DNN;
import gov.nasa.jpf.symbc.DNNDataGeneralize;
import gov.nasa.jpf.symbc.DNNGeneralize;
public class SymbolicDriver9 {
	static final int IMG_HEIGHT = 28;
	static final int IMG_WIDTH = 28; 
	static String originalconstraints="-3.497801416266892\n" + 
			"-3.4854310253778404\n" + 
			"1.9393569363525418\n" + 
			"7.683084788165818\n" + 
			"-3.8506159693699935\n" + 
			"7.048556853287018\n" + 
			"-11.35241364230056\n" + 
			"-8.102943722566804\n" + 
			"0.2788738342445433\n" + 
			sym0 -0.009282240644097328) sym0) 0.0) -0.006635597907006741) ( *  ( +  ( +  sym1 -0.0820058137178421) sym1) 0.0)) ( *  ( +  ( +  sym2 -0.06717900186777115) sym2) 5.194541725608362)) ( *  ( +  ( +  sym3 -0.039281200617551804) sym3) 0.0)) ( *  ( +  ( +  sym4 -0.001670553698204458) sym4) 6.258615426354572)) ( *  ( +  ( +  sym5 -0.024356316775083542) sym5) 1.919540022787371)) ( *  ( +  ( +  sym6 -0.00989129114896059) sym6) 0.0)) ( *  ( +  ( +  sym7 -0.01981140300631523) sym7) 6.4996833102218075)) ( *  ( +  ( +  sym8 0.02810690365731716) sym8) 3.133353268077286)) ( *  ( +  ( +  sym9 -0.07472338527441025) sym9) 0.0)) ( *  ( +  ( +  sym10 0.025087496265769005) sym10) 3.349870868879894)) ( *  ( +  ( +  sym11 -0.04474908858537674) sym11) 0.0)) ( *  ( +  ( +  sym12 0.006986162159591913) sym12) 0.0)) ( *  ( +  ( +  sym13 0.008535406552255154) sym13) 0.0)) ( *  ( +  ( +  sym14 -0.10439682751893997) sym14) 0.0)) ( *  ( +  ( +  sym15 -0.04304422065615654) sym15) 10.712013741410038)) ( *  ( +  ( +  sym16 -0.043066784739494324) sym16) 8.770119994645313)) ( *  ( +  ( +  sym17 0.02021830528974533) sym17) 0.0)) ( *  ( +  ( +  sym18 0.027356477454304695) sym18) 15.420005143509776)) ( *  ( +  ( +  sym19 -0.07470890134572983) sym19) 0.0)) ( *  ( +  ( +  sym20 -0.03352276608347893) sym20) 0.0)) ( *  ( +  ( +  sym21 -0.016112403944134712) sym21) 9.827915840540511)) ( *  ( +  ( +  sym22 0.04117568954825401) sym22) 0.0)) ( *  ( +  ( +  sym23 0.039601437747478485) sym23) 11.423282568567283)) ( *  ( +  ( +  sym24 -0.06135382503271103) sym24) 0.0)) ( *  ( +  ( +  sym25 -0.000858768064063042) sym25) 0.0)) ( *  ( +  ( +  sym26 0.004554882645606995) sym26) 0.0)) ( *  ( +  ( +  sym27 0.03665570169687271) sym27) 7.542647314879387)) ( *  ( +  ( +  sym28 0.020739484578371048) sym28) 0.0)) ( *  ( +  ( +  sym29 0.008769475854933262) sym29) 2.126841256240067)) ( *  ( +  ( +  sym30 -0.03205788508057594) sym30) 13.167809680941426)) ( *  ( +  ( +  sym31 0.0473710298538208) sym31) 10.855192093717115)) ( *  ( +  ( +  sym32 -0.04868835210800171) sym32) 3.744543457323715)) ( *  ( +  ( +  sym33 0.034962527453899384) sym33) 7.7651473058569565)) ( *  ( +  ( +  sym34 -0.023723673075437546) sym34) 8.538638187274872)) ( *  ( +  ( +  sym35 -0.009441585280001163) sym35) 11.793416367585207)) ( *  ( +  ( +  sym36 0.025971680879592896) sym36) 13.682790646550957)) ( *  ( +  ( +  sym37 0.04938938096165657) sym37) 11.815449137160208)) ( *  ( +  ( +  sym38 0.025847597047686577) sym38) 0.0)) ( *  ( +  ( +  sym39 -0.010160422883927822) sym39) 14.559520826529026)) ( *  ( +  ( +  sym40 0.018472541123628616) sym40) 0.0)) ( *  ( +  ( +  sym41 0.001542334328405559) sym41) 0.0)) ( *  ( +  ( +  sym42 -0.0490218847990036) sym42) 7.582977573979904)) ( *  ( +  ( +  sym43 -0.014337817206978798) sym43) 10.33952271910712)) ( *  ( +  ( +  sym44 0.019228341057896614) sym44) 0.0)) ( *  ( +  ( +  sym45 0.05205297842621803) sym45) 0.0)) ( *  ( +  ( +  sym46 0.013157055713236332) sym46) 0.0)) ( *  ( +  ( +  sym47 0.08588290214538574) sym47) 24.76921279664019)) ( *  ( +  ( +  sym48 -0.001188013586215675) sym48) 0.0)) ( *  ( +  ( +  sym49 -0.02423473820090294) sym49) 8.713360712139496)) ( *  ( +  ( +  sym50 0.028998466208577156) sym50) 0.0)) ( *  ( +  ( +  sym51 0.034258998930454254) sym51) 0.0)) ( *  ( +  ( +  sym52 0.03939567878842354) sym52) 0.0)) ( *  ( +  ( +  sym53 -0.03565569221973419) sym53) 0.0)) ( *  ( +  ( +  sym54 0.03124639391899109) sym54) 7.672425134231474)) ( *  ( +  ( +  sym55 -0.042638570070266724) sym55) 0.0)) ( *  ( +  ( +  sym56 -0.013627398759126663) sym56) 0.0)) ( *  ( +  ( +  sym57 0.01751391589641571) sym57) 3.386835153628506)) ( *  ( +  ( +  sym58 -0.002859047148376703) sym58) 0.0)) ( *  ( +  ( +  sym59 0.05083085224032402) sym59) 0.0)) ( *  ( +  ( +  sym60 -0.028165195137262344) sym60) 0.0)) ( *  ( +  ( +  sym61 -0.10701394826173782) sym61) 0.0)) ( *  ( +  ( +  sym62 0.039137255400419235) sym62) 4.913702038790544)) ( *  ( +  ( +  sym63 -0.02189278043806553) sym63) 0.4057041382034327)) ( *  ( +  ( +  sym64 0.005151238758116961) sym64) 9.354969204516795)) ( *  ( +  ( +  sym65 0.03791559115052223) sym65) 0.0)) ( *  ( +  ( +  sym66 -0.042179033160209656) sym66) 0.0)) ( *  ( +  ( +  sym67 0.017469873651862144) sym67) 0.0)) ( *  ( +  ( +  sym68 0.004537649918347597) sym68) 2.8222024523259672)) ( *  ( +  ( +  sym69 0.01941416598856449) sym69) 0.0)) ( *  ( +  ( +  sym70 -0.015628961846232414) sym70) 0.0)) ( *  ( +  ( +  sym71 -0.012157196179032326) sym71) 17.914012860344403)) ( *  ( +  ( +  sym72 0.038389626890420914) sym72) 0.0)) ( *  ( +  ( +  sym73 -0.0632554218173027) sym73) 0.0)) ( *  ( +  ( +  sym74 -0.0816383808851242) sym74) 5.025521432557022)) ( *  ( +  ( +  sym75 -0.07931529730558395) sym75) 2.657035120591891)) ( *  ( +  ( +  sym76 -0.0659983903169632) sym76) 0.0)) ( *  ( +  ( +  sym77 -0.007848352193832397) sym77) 0.0)) ( *  ( +  ( +  sym78 0.030839916318655014) sym78) 22.52469837651995)) ( *  ( +  ( +  sym79 -0.09992385655641556) sym79) 0.0)) ( *  ( +  ( +  sym80 -0.010709159076213837) sym80) 4.695768543474419)) ( *  ( +  ( +  sym81 -0.01938595622777939) sym81) 5.538315419531794)) ( *  ( +  ( +  sym82 -0.037297267466783524) sym82) 11.453784467911317)) ( *  ( +  ( +  sym83 0.05975116044282913) sym83) 0.0)) ( *  ( +  ( +  sym84 -0.007372998166829348) sym84) 0.0)) ( *  ( +  ( +  sym85 -0.01912103034555912) sym85) 17.995091330907766)) ( *  ( +  ( +  sym86 0.037657640874385834) sym86) 4.574972879234383)) ( *  ( +  ( +  sym87 -0.007474015932530165) sym87) 0.0)) ( *  ( +  ( +  sym88 -0.02845785953104496) sym88) 0.0)) ( *  ( +  ( +  sym89 0.020848726853728294) sym89) 9.462116705616646)) ( *  ( +  ( +  sym90 -0.053526006639003754) sym90) 0.0)) ( *  ( +  ( +  sym91 -0.06039901077747345) sym91) 0.0)) ( *  ( +  ( +  sym92 -0.04590544104576111) sym92) 0.0)) ( *  ( +  ( +  sym93 0.04736519604921341) sym93) 5.78229708247041)) ( *  ( +  ( +  sym94 -0.07795249670743942) sym94) 0.0)) ( *  ( +  ( +  sym95 0.04174947366118431) sym95) 0.0)) ( *  ( +  ( +  sym96 -0.002164418343454599) sym96) 13.049686593872625)) ( *  ( +  ( +  sym97 -0.000760212074965239) sym97) 0.0)) ( *  ( +  ( +  sym98 0.011875597760081291) sym98) 0.0)) ( *  ( +  ( +  sym99 0.004341664258390665) sym99) 0.0)) ( *  ( +  ( +  sym100 0.046594277024269104) sym100) 18.483087938712377)) ( *  ( +  ( +  sym101 -0.04494229704141617) sym101) 0.0)) ( *  ( +  ( +  sym102 -0.08919907361268997) sym102) 0.0)) ( *  ( +  ( +  sym103 0.03398638963699341) sym103) 0.0)) ( *  ( +  ( +  sym104 0.006068298127502203) sym104) 0.0)) ( *  ( +  ( +  sym105 0.011540194042026997) sym105) 12.3804712209381)) ( *  ( +  ( +  sym106 0.032053008675575256) sym106) 0.0)) ( *  ( +  ( +  sym107 0.03732383996248245) sym107) 0.0)) ( *  ( +  ( +  sym108 0.017219163477420807) sym108) 0.0)) ( *  ( +  ( +  sym109 -0.037688035517930984) sym109) 5.942304141438326)) ( *  ( +  ( +  sym110 -0.05377157777547836) sym110) 18.20912925433989)) ( *  ( +  ( +  sym111 0.028914960101246834) sym111) 0.0)) ( *  ( +  ( +  sym112 0.001844356418587267) sym112) 0.0)) ( *  ( +  ( +  sym113 -0.032555293291807175) sym113) 6.403610656629124)) ( *  ( +  ( +  sym114 0.03935395926237106) sym114) 17.280074509369456)) ( *  ( +  ( +  sym115 0.010038139298558235) sym115) 7.3107084020059)) ( *  ( +  ( +  sym116 -0.003252855036407709) sym116) 4.561644262965822)) ( *  ( +  ( +  sym117 -0.023869715631008148) sym117) 14.778670608715585)) ( *  ( +  ( +  sym118 -0.011750905774533749) sym118) 0.0)) ( *  ( +  ( +  sym119 0.013982435688376427) sym119) 0.5294480208439659)) ( *  ( +  ( +  sym120 -0.0014137007528916) sym120) 0.0)) ( *  ( +  ( +  sym121 0.03863229975104332) sym121) 0.0)) ( *  ( +  ( +  sym122 0.000138159826747142) sym122) 2.2589837819478893)) ( *  ( +  ( +  sym123 0.011099141091108322) sym123) 13.722262826898161)) ( *  ( +  ( +  sym124 0.018617911264300346) sym124) 17.624287474083708)) ( *  ( +  ( +  sym125 0.036712344735860825) sym125) 0.0)) ( *  ( +  ( +  sym126 0.04566141963005066) sym126) 4.458996677394697)) ( *  ( +  ( +  sym127 0.059357911348342896) sym127) 0.0))\n";
	public static void main(String[] args) throws  Exception {
		String inputFile = DNNt.path+"inputs\\inn95.txt";
		File file = new File(inputFile); 
		BufferedReader br = new BufferedReader(new FileReader(file)); 
		double[][][] a = new double[IMG_HEIGHT][IMG_WIDTH][1];
		String st;
		while ((st = br.readLine()) != null) {
			String[] values = st.split(",");
			int index = 0;
			while (index < values.length) {
				for (int i = 0; i <  IMG_HEIGHT; i++)
					for (int j = 0; j < IMG_WIDTH; j++)
						for (int k = 0; k < 1; k++)
						{
							Double val = Double.valueOf(values[index]);
							index++;
							a[i][j][k] = (double)(val);
						}
			}
		}
		int original=0;
		mnist0.DNNt model = new mnist0.DNNt();    
		if(original==1) {
			System.out.println("OLD IMPLEMENTATION");
			DNN.readDataFromFiles(DNNt.path+"params\\");
			model.biases0 = DNN.getBiases0();
			model.biases2 = DNN.getBiases2();
			model.biases6 = DNN.getBiases6();
			model.biases8 = DNN.getBiases8();
			model.weights0 = DNN.getWeights0();
			model.weights2 = DNN.getWeights2();
			model.weights6 = DNN.getWeights6();
			model.weights8 = DNN.getWeights8();
		}
		else
		{
			System.out.println("NEW IMPLEMENTATION");
			DNNGeneralize.readDataFromFiles(DNNt.path+"params\\",DNNt.path+"mnist0.json");
			model.biases0 = (double[]) DNNGeneralize.get_data("biases0");
			model.biases2 = (double[]) DNNGeneralize.get_data("biases2");
			model.biases6 = (double[]) DNNGeneralize.get_data("biases6");
			model.biases8 = (double[]) DNNGeneralize.get_data("biases8");
			model.weights0 = (double[][][][]) DNNGeneralize.get_data("weights0");
			model.weights2 = (double[][][][]) DNNGeneralize.get_data("weights2");
			model.weights6 = (double[][]) DNNGeneralize.get_data("weights6");
			model.weights8 = (double[][]) DNNGeneralize.get_data("weights8");
		}
		int label = model.run(a,9);
		System.out.println(DNNt.generatedconstraints);
		assert(DNNt.generatedconstraints.equals(originalconstraints));
		System.out.println("Test 9 Passed");
	}
}
