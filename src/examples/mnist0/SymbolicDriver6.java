package mnist0;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import gov.nasa.jpf.symbc.Debug;
import gov.nasa.jpf.symbc.DNN;
import gov.nasa.jpf.symbc.DNNDataGeneralize;
import gov.nasa.jpf.symbc.DNNGeneralize;
public class SymbolicDriver6 {
	static final int IMG_HEIGHT = 28;
	static final int IMG_WIDTH = 28; 
	static String originalconstraints="-4.01222713724769\n" + 
			"1.0048451486731738\n" + 
			"2.3678415094058174\n" + 
			"0.6730049056420493\n" + 
			"0.7143638783486157\n" + 
			"-2.498534682737625\n" + 
			sym0 0.0706818550825119) sym0) 6.301332232663401) -0.002767577534541488) ( *  ( +  ( +  sym1 0.023608524352312088) sym1) 0.0)) ( *  ( +  ( +  sym2 0.04440354183316231) sym2) 7.937887048936052)) ( *  ( +  ( +  sym3 0.024554328992962837) sym3) 7.307708286640491)) ( *  ( +  ( +  sym4 -0.06613549590110779) sym4) 0.8547151815147279)) ( *  ( +  ( +  sym5 0.007017764262855053) sym5) 0.0)) ( *  ( +  ( +  sym6 0.012163645587861538) sym6) 0.0)) ( *  ( +  ( +  sym7 0.03615044057369232) sym7) 0.0)) ( *  ( +  ( +  sym8 0.02156860940158367) sym8) 6.591688999712991)) ( *  ( +  ( +  sym9 0.02654257044196129) sym9) 1.5357410365216697)) ( *  ( +  ( +  sym10 0.0396922305226326) sym10) 6.922099512139258)) ( *  ( +  ( +  sym11 0.03596949577331543) sym11) 0.0)) ( *  ( +  ( +  sym12 -0.04539806395769119) sym12) 0.0)) ( *  ( +  ( +  sym13 0.04190167039632797) sym13) 0.0)) ( *  ( +  ( +  sym14 -0.01577276736497879) sym14) 0.0)) ( *  ( +  ( +  sym15 -0.045741356909275055) sym15) 2.4432833917630408)) ( *  ( +  ( +  sym16 0.008410410024225712) sym16) 5.6634868634868845)) ( *  ( +  ( +  sym17 0.012222138233482838) sym17) 2.5751319689278827)) ( *  ( +  ( +  sym18 -0.034628499299287796) sym18) 1.7900232877932218)) ( *  ( +  ( +  sym19 0.0495787188410759) sym19) 1.7815062973891258)) ( *  ( +  ( +  sym20 -0.07352155447006226) sym20) 7.843782989371854)) ( *  ( +  ( +  sym21 -0.0334002859890461) sym21) 0.0)) ( *  ( +  ( +  sym22 -0.0500100739300251) sym22) 0.0)) ( *  ( +  ( +  sym23 0.04113372415304184) sym23) 11.46274909397902)) ( *  ( +  ( +  sym24 0.015244203619658947) sym24) 7.732710367020961)) ( *  ( +  ( +  sym25 0.002882906934246421) sym25) 7.0093275014000715)) ( *  ( +  ( +  sym26 0.07288774102926254) sym26) 6.650863522908059)) ( *  ( +  ( +  sym27 0.010419185273349285) sym27) 0.9184685777707255)) ( *  ( +  ( +  sym28 0.032733600586652756) sym28) 0.0)) ( *  ( +  ( +  sym29 -0.004438298754394054) sym29) 5.399350469570956)) ( *  ( +  ( +  sym30 0.006860032677650452) sym30) 9.149718938947158)) ( *  ( +  ( +  sym31 -0.018687821924686432) sym31) 8.526955898819415)) ( *  ( +  ( +  sym32 0.013742806389927864) sym32) 10.978860997659378)) ( *  ( +  ( +  sym33 -0.0742051899433136) sym33) 0.0)) ( *  ( +  ( +  sym34 -0.0693449154496193) sym34) 0.0)) ( *  ( +  ( +  sym35 -0.015043950639665127) sym35) 7.36354260907877)) ( *  ( +  ( +  sym36 0.025727612897753716) sym36) 3.860008298303786)) ( *  ( +  ( +  sym37 -0.022746825590729713) sym37) 6.808197981141943)) ( *  ( +  ( +  sym38 -0.03176446259021759) sym38) 1.7044914826344464)) ( *  ( +  ( +  sym39 -0.04004063084721565) sym39) 0.0)) ( *  ( +  ( +  sym40 0.00087411270942539) sym40) 0.0)) ( *  ( +  ( +  sym41 -0.04664504900574684) sym41) 0.0)) ( *  ( +  ( +  sym42 -0.008193820714950562) sym42) 0.0)) ( *  ( +  ( +  sym43 -0.009622818790376186) sym43) 5.612492064123675)) ( *  ( +  ( +  sym44 -0.08076068758964539) sym44) 0.0)) ( *  ( +  ( +  sym45 -0.025052914395928383) sym45) 1.4968591009330083)) ( *  ( +  ( +  sym46 -0.07841543853282928) sym46) 0.0)) ( *  ( +  ( +  sym47 -0.004050620831549168) sym47) 0.0)) ( *  ( +  ( +  sym48 0.04583238810300827) sym48) 0.0)) ( *  ( +  ( +  sym49 -0.07190962880849838) sym49) 2.19343947304726)) ( *  ( +  ( +  sym50 -0.010034759528934956) sym50) 0.0)) ( *  ( +  ( +  sym51 -0.06743265688419342) sym51) 0.0)) ( *  ( +  ( +  sym52 -0.07293438166379929) sym52) 0.0)) ( *  ( +  ( +  sym53 -0.028498081490397453) sym53) 0.0)) ( *  ( +  ( +  sym54 -0.03514598309993744) sym54) 1.997618335890482)) ( *  ( +  ( +  sym55 0.016165224835276604) sym55) 0.8094113895151839)) ( *  ( +  ( +  sym56 -0.05766943469643593) sym56) 0.0)) ( *  ( +  ( +  sym57 -0.06982581317424774) sym57) 4.932921962499825)) ( *  ( +  ( +  sym58 -0.02445925585925579) sym58) 0.0)) ( *  ( +  ( +  sym59 -0.02688100002706051) sym59) 0.0)) ( *  ( +  ( +  sym60 0.014618230052292347) sym60) 0.0)) ( *  ( +  ( +  sym61 0.06750332564115524) sym61) 7.848516256638511)) ( *  ( +  ( +  sym62 -0.028075188398361206) sym62) 1.1104899771361727)) ( *  ( +  ( +  sym63 0.034100357443094254) sym63) 2.080735090617284)) ( *  ( +  ( +  sym64 -0.059347257018089294) sym64) 5.0877423683825596)) ( *  ( +  ( +  sym65 -0.00469057634472847) sym65) 0.0)) ( *  ( +  ( +  sym66 0.02624882012605667) sym66) 9.295053707280545)) ( *  ( +  ( +  sym67 0.03982860594987869) sym67) 0.0)) ( *  ( +  ( +  sym68 0.000166523590451106) sym68) 0.8024528042601596)) ( *  ( +  ( +  sym69 -0.014248279854655266) sym69) 4.0936635184683725)) ( *  ( +  ( +  sym70 -0.043893422931432724) sym70) 0.0)) ( *  ( +  ( +  sym71 0.04890328273177147) sym71) 10.644102967276707)) ( *  ( +  ( +  sym72 -0.001929487916640937) sym72) 0.0)) ( *  ( +  ( +  sym73 -0.039879653602838516) sym73) 0.0)) ( *  ( +  ( +  sym74 -0.0350838266313076) sym74) 10.191902390824042)) ( *  ( +  ( +  sym75 0.001407315605320036) sym75) 3.0168328413900602)) ( *  ( +  ( +  sym76 0.054230280220508575) sym76) 4.5932357088989235)) ( *  ( +  ( +  sym77 -0.019603988155722618) sym77) 0.0)) ( *  ( +  ( +  sym78 -0.10314209759235382) sym78) 2.412302124845995)) ( *  ( +  ( +  sym79 0.05844317376613617) sym79) 4.200395109323756)) ( *  ( +  ( +  sym80 0.058323461562395096) sym80) 4.200519685612008)) ( *  ( +  ( +  sym81 0.056085005402565) sym81) 2.965924231628381)) ( *  ( +  ( +  sym82 -0.003198027610778809) sym82) 6.891694771753091)) ( *  ( +  ( +  sym83 -0.08488793671131134) sym83) 0.16898997628723122)) ( *  ( +  ( +  sym84 0.049099065363407135) sym84) 0.0916479172833677)) ( *  ( +  ( +  sym85 0.024070540443062782) sym85) 10.447770459243674)) ( *  ( +  ( +  sym86 -0.02004360407590866) sym86) 6.198811452494313)) ( *  ( +  ( +  sym87 0.028461864218115807) sym87) 0.0)) ( *  ( +  ( +  sym88 -0.028469029814004898) sym88) 3.094209556674503)) ( *  ( +  ( +  sym89 -0.07440569251775742) sym89) 3.602448871491254)) ( *  ( +  ( +  sym90 -0.028460169211030006) sym90) 0.0)) ( *  ( +  ( +  sym91 -0.023695416748523712) sym91) 0.0)) ( *  ( +  ( +  sym92 -0.05943210422992706) sym92) 4.201311792786928)) ( *  ( +  ( +  sym93 0.029124632477760315) sym93) 2.986521385037166)) ( *  ( +  ( +  sym94 -0.023170530796051025) sym94) 0.0)) ( *  ( +  ( +  sym95 0.004975653253495693) sym95) 0.0)) ( *  ( +  ( +  sym96 -0.0837344154715538) sym96) 5.963701572341562)) ( *  ( +  ( +  sym97 -0.000572233111597598) sym97) 0.0)) ( *  ( +  ( +  sym98 0.07770859450101852) sym98) 0.0)) ( *  ( +  ( +  sym99 0.05468565225601196) sym99) 4.546488690611533)) ( *  ( +  ( +  sym100 0.020103694871068) sym100) 2.1337968854340463)) ( *  ( +  ( +  sym101 0.03009823150932789) sym101) 0.0)) ( *  ( +  ( +  sym102 -0.09374642372131348) sym102) 0.0)) ( *  ( +  ( +  sym103 -0.04745371267199516) sym103) 0.0)) ( *  ( +  ( +  sym104 0.004517850466072559) sym104) 0.0)) ( *  ( +  ( +  sym105 -0.08495749533176422) sym105) 4.153446176245173)) ( *  ( +  ( +  sym106 -0.08196216076612473) sym106) 0.0)) ( *  ( +  ( +  sym107 -0.051118411123752594) sym107) 0.0)) ( *  ( +  ( +  sym108 -0.06766106188297272) sym108) 3.866801929432083)) ( *  ( +  ( +  sym109 -0.002836266765370965) sym109) 0.6284464082966279)) ( *  ( +  ( +  sym110 -0.09594417363405228) sym110) 0.0)) ( *  ( +  ( +  sym111 -0.039961639791727066) sym111) 0.0)) ( *  ( +  ( +  sym112 -0.04341326653957367) sym112) 0.0)) ( *  ( +  ( +  sym113 0.0484151616692543) sym113) 4.726121390717904)) ( *  ( +  ( +  sym114 -0.04290492832660675) sym114) 0.0)) ( *  ( +  ( +  sym115 -0.03754580393433571) sym115) 6.630802369270456)) ( *  ( +  ( +  sym116 0.007378689013421535) sym116) 0.0)) ( *  ( +  ( +  sym117 -0.01781187206506729) sym117) 3.5917240819585405)) ( *  ( +  ( +  sym118 0.02465137466788292) sym118) 0.0)) ( *  ( +  ( +  sym119 0.01823878288269043) sym119) 7.141097290408593)) ( *  ( +  ( +  sym120 0.022266577929258347) sym120) 0.0)) ( *  ( +  ( +  sym121 0.02641756646335125) sym121) 1.7637828102163953)) ( *  ( +  ( +  sym122 -0.02885923534631729) sym122) 0.0)) ( *  ( +  ( +  sym123 -0.008250356651842594) sym123) 7.476417761071689)) ( *  ( +  ( +  sym124 -0.061074092984199524) sym124) 3.631415175987272)) ( *  ( +  ( +  sym125 -0.013611117377877235) sym125) 0.0)) ( *  ( +  ( +  sym126 0.019645046442747116) sym126) 0.9951444986646073)) ( *  ( +  ( +  sym127 0.05167704448103905) sym127) 1.7625183068215606))\n" + 
			"-4.258073705015366\n" + 
			"0.08220740073900784\n" + 
			"-4.018316729919913\n";
	public static void main(String[] args) throws  Exception {
		String inputFile = DNNt.path+"inputs\\inn65.txt";
		File file = new File(inputFile); 
		BufferedReader br = new BufferedReader(new FileReader(file)); 
		double[][][] a = new double[IMG_HEIGHT][IMG_WIDTH][1];
		String st;
		while ((st = br.readLine()) != null) {
			String[] values = st.split(",");
			int index = 0;
			while (index < values.length) {
				for (int i = 0; i <  IMG_HEIGHT; i++)
					for (int j = 0; j < IMG_WIDTH; j++)
						for (int k = 0; k < 1; k++)
						{
							Double val = Double.valueOf(values[index]);
							index++;
							a[i][j][k] = (double)(val);
						}
			}
		}
		int original=0;
		mnist0.DNNt model = new mnist0.DNNt();    
		if(original==1) {
			System.out.println("OLD IMPLEMENTATION");
			DNN.readDataFromFiles(DNNt.path+"params\\");
			model.biases0 = DNN.getBiases0();
			model.biases2 = DNN.getBiases2();
			model.biases6 = DNN.getBiases6();
			model.biases8 = DNN.getBiases8();
			model.weights0 = DNN.getWeights0();
			model.weights2 = DNN.getWeights2();
			model.weights6 = DNN.getWeights6();
			model.weights8 = DNN.getWeights8();
		}
		else
		{
			System.out.println("NEW IMPLEMENTATION");
			DNNGeneralize.readDataFromFiles(DNNt.path+"params\\",DNNt.path+"mnist0.json");
			model.biases0 = (double[]) DNNGeneralize.get_data("biases0");
			model.biases2 = (double[]) DNNGeneralize.get_data("biases2");
			model.biases6 = (double[]) DNNGeneralize.get_data("biases6");
			model.biases8 = (double[]) DNNGeneralize.get_data("biases8");
			model.weights0 = (double[][][][]) DNNGeneralize.get_data("weights0");
			model.weights2 = (double[][][][]) DNNGeneralize.get_data("weights2");
			model.weights6 = (double[][]) DNNGeneralize.get_data("weights6");
			model.weights8 = (double[][]) DNNGeneralize.get_data("weights8");
		}
		int label = model.run(a,6);
		System.out.println(DNNt.generatedconstraints);
		assert(DNNt.generatedconstraints.equals(originalconstraints));
		System.out.println("Test 6 Passed");
	}
}
