package mnist0;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import gov.nasa.jpf.symbc.Debug;
import gov.nasa.jpf.symbc.DNN;
import gov.nasa.jpf.symbc.DNNDataGeneralize;
import gov.nasa.jpf.symbc.DNNGeneralize;
public class SymbolicDriver7 {
	static final int IMG_HEIGHT = 28;
	static final int IMG_WIDTH = 28; 
	static String originalconstraints="-5.020211630897632\n" + 
			"-5.503982405285783\n" + 
			"-0.7148658542436994\n" + 
			"0.255275390411468\n" + 
			"4.031813339397484\n" + 
			"2.98124617754483\n" + 
			"-0.02114561497799136\n" + 
			sym0 -0.05877283960580826) sym0) 0.0) 0.007874315604567528) ( *  ( +  ( +  sym1 0.09564360231161118) sym1) 4.972669271815958)) ( *  ( +  ( +  sym2 -0.034624822437763214) sym2) 9.430892011312093)) ( *  ( +  ( +  sym3 -0.053748395293951035) sym3) 6.793554852026148)) ( *  ( +  ( +  sym4 -0.0219489224255085) sym4) 0.15274399387594806)) ( *  ( +  ( +  sym5 0.09018921107053757) sym5) 10.28137862198169)) ( *  ( +  ( +  sym6 0.04130735248327255) sym6) 0.0)) ( *  ( +  ( +  sym7 -0.03509736433625221) sym7) 0.0)) ( *  ( +  ( +  sym8 -0.03225642442703247) sym8) 18.319663325868632)) ( *  ( +  ( +  sym9 -0.01348476205021143) sym9) 0.8105114784311899)) ( *  ( +  ( +  sym10 -0.06253526359796524) sym10) 8.968984895218338)) ( *  ( +  ( +  sym11 -0.009088331833481789) sym11) 2.087880562282684)) ( *  ( +  ( +  sym12 -0.02449786476790905) sym12) 0.0)) ( *  ( +  ( +  sym13 0.017977705225348473) sym13) 0.0)) ( *  ( +  ( +  sym14 0.07672098278999329) sym14) 0.0)) ( *  ( +  ( +  sym15 -0.03130310773849487) sym15) 0.0)) ( *  ( +  ( +  sym16 -0.05628384277224541) sym16) 7.387796869019321)) ( *  ( +  ( +  sym17 -0.06965207308530807) sym17) 12.8065423881375)) ( *  ( +  ( +  sym18 0.04954160749912262) sym18) 14.534559538122574)) ( *  ( +  ( +  sym19 0.007032555527985096) sym19) 8.56992003063714)) ( *  ( +  ( +  sym20 0.061947282403707504) sym20) 2.774458815189963)) ( *  ( +  ( +  sym21 0.002350200433284044) sym21) 0.0)) ( *  ( +  ( +  sym22 -0.00938512198626995) sym22) 0.0)) ( *  ( +  ( +  sym23 -0.04568661376833916) sym23) 11.501518970808855)) ( *  ( +  ( +  sym24 -0.028681179508566856) sym24) 11.646109451615086)) ( *  ( +  ( +  sym25 -0.04865134879946709) sym25) 23.840406304540966)) ( *  ( +  ( +  sym26 -0.07561766356229782) sym26) 0.0)) ( *  ( +  ( +  sym27 -0.019312411546707153) sym27) 4.419729011207834)) ( *  ( +  ( +  sym28 0.032202694565057755) sym28) 0.0)) ( *  ( +  ( +  sym29 0.013853978365659714) sym29) 0.0)) ( *  ( +  ( +  sym30 -0.06592237204313278) sym30) 6.008798549164607)) ( *  ( +  ( +  sym31 0.026263773441314697) sym31) 15.51306819489019)) ( *  ( +  ( +  sym32 0.016333185136318207) sym32) 1.283587337492719)) ( *  ( +  ( +  sym33 -0.03633478656411171) sym33) 0.0)) ( *  ( +  ( +  sym34 0.04356701299548149) sym34) 0.0)) ( *  ( +  ( +  sym35 -0.04718407616019249) sym35) 3.5577590040073317)) ( *  ( +  ( +  sym36 -0.00730269867926836) sym36) 0.0)) ( *  ( +  ( +  sym37 -0.027796002104878426) sym37) 15.56590618519739)) ( *  ( +  ( +  sym38 -0.04347171634435654) sym38) 0.0)) ( *  ( +  ( +  sym39 0.04949898645281792) sym39) 7.311793463302173)) ( *  ( +  ( +  sym40 0.024595538154244423) sym40) 0.0)) ( *  ( +  ( +  sym41 -0.014620750211179256) sym41) 0.0)) ( *  ( +  ( +  sym42 -0.043541114777326584) sym42) 0.0)) ( *  ( +  ( +  sym43 0.025276873260736465) sym43) 16.74261812417197)) ( *  ( +  ( +  sym44 0.039729416370391846) sym44) 8.56499871886436)) ( *  ( +  ( +  sym45 0.03985176607966423) sym45) 13.3333633047212)) ( *  ( +  ( +  sym46 -0.00327469571493566) sym46) 0.0)) ( *  ( +  ( +  sym47 -0.08008349686861038) sym47) 0.0)) ( *  ( +  ( +  sym48 0.015615032985806465) sym48) 4.412418971919612)) ( *  ( +  ( +  sym49 -0.046759843826293945) sym49) 0.0)) ( *  ( +  ( +  sym50 -0.006518356036394835) sym50) 0.0)) ( *  ( +  ( +  sym51 0.010751216672360897) sym51) 0.0)) ( *  ( +  ( +  sym52 0.017656845971941948) sym52) 11.562270800649364)) ( *  ( +  ( +  sym53 0.006149363704025745) sym53) 0.0)) ( *  ( +  ( +  sym54 -0.001137855928391218) sym54) 2.211796234572641)) ( *  ( +  ( +  sym55 -0.08326303213834763) sym55) 0.0)) ( *  ( +  ( +  sym56 0.004399538971483707) sym56) 0.0)) ( *  ( +  ( +  sym57 0.01018691435456276) sym57) 6.701106093075653)) ( *  ( +  ( +  sym58 -0.028881922364234924) sym58) 0.0)) ( *  ( +  ( +  sym59 -0.011444427073001862) sym59) 0.0)) ( *  ( +  ( +  sym60 0.018222808837890625) sym60) 0.0)) ( *  ( +  ( +  sym61 0.08624348789453506) sym61) 6.829978614427066)) ( *  ( +  ( +  sym62 0.026564298197627068) sym62) 0.0)) ( *  ( +  ( +  sym63 -0.011600473895668983) sym63) 0.0)) ( *  ( +  ( +  sym64 0.019268522039055824) sym64) 0.0)) ( *  ( +  ( +  sym65 0.03552630916237831) sym65) 6.944941683944188)) ( *  ( +  ( +  sym66 0.04330742731690407) sym66) 3.4817675734766267)) ( *  ( +  ( +  sym67 -0.011073935776948929) sym67) 0.0)) ( *  ( +  ( +  sym68 0.014231877401471138) sym68) 5.225967416258518)) ( *  ( +  ( +  sym69 0.03460559621453285) sym69) 0.0)) ( *  ( +  ( +  sym70 0.02843724936246872) sym70) 0.0)) ( *  ( +  ( +  sym71 -0.037039291113615036) sym71) 13.492719117129113)) ( *  ( +  ( +  sym72 -0.024075457826256752) sym72) 0.0)) ( *  ( +  ( +  sym73 0.04788525775074959) sym73) 0.0)) ( *  ( +  ( +  sym74 0.047181397676467896) sym74) 9.85173757157663)) ( *  ( +  ( +  sym75 -0.02523185685276985) sym75) 0.0)) ( *  ( +  ( +  sym76 -0.05281700938940048) sym76) 0.0)) ( *  ( +  ( +  sym77 0.05080430582165718) sym77) 0.0)) ( *  ( +  ( +  sym78 -0.030914409086108208) sym78) 2.044830027653137)) ( *  ( +  ( +  sym79 0.016692668199539185) sym79) 26.07374510884668)) ( *  ( +  ( +  sym80 -0.07599620521068573) sym80) 1.8304918403695685)) ( *  ( +  ( +  sym81 -0.08911824226379395) sym81) 0.0)) ( *  ( +  ( +  sym82 -0.06373431533575058) sym82) 5.613805921471645)) ( *  ( +  ( +  sym83 0.016008879989385605) sym83) 0.0)) ( *  ( +  ( +  sym84 -0.07737205177545547) sym84) 8.057657215931666)) ( *  ( +  ( +  sym85 -0.05509987846016884) sym85) 0.0)) ( *  ( +  ( +  sym86 0.06492844969034195) sym86) 0.0)) ( *  ( +  ( +  sym87 -0.01197892613708973) sym87) 0.0)) ( *  ( +  ( +  sym88 0.008926606737077236) sym88) 36.07119212306321)) ( *  ( +  ( +  sym89 0.05369134247303009) sym89) 0.0)) ( *  ( +  ( +  sym90 -0.03544626384973526) sym90) 0.0)) ( *  ( +  ( +  sym91 0.07990458607673645) sym91) 0.0)) ( *  ( +  ( +  sym92 0.044425301253795624) sym92) 0.0)) ( *  ( +  ( +  sym93 0.008787672035396099) sym93) 0.6499647525519137)) ( *  ( +  ( +  sym94 0.005221297964453697) sym94) 0.0)) ( *  ( +  ( +  sym95 -0.030533039942383766) sym95) 0.0)) ( *  ( +  ( +  sym96 0.051224034279584885) sym96) 0.0)) ( *  ( +  ( +  sym97 0.09582487493753433) sym97) 15.058102938885789)) ( *  ( +  ( +  sym98 0.001628226367756724) sym98) 0.0)) ( *  ( +  ( +  sym99 -0.05670413747429848) sym99) 2.5967569062800666)) ( *  ( +  ( +  sym100 -0.05388137698173523) sym100) 17.11871580467892)) ( *  ( +  ( +  sym101 0.021481063216924667) sym101) 0.0)) ( *  ( +  ( +  sym102 0.06902876496315002) sym102) 0.0)) ( *  ( +  ( +  sym103 -0.0055152946151793) sym103) 0.0)) ( *  ( +  ( +  sym104 0.053579218685626984) sym104) 0.0)) ( *  ( +  ( +  sym105 0.013177995570003986) sym105) 0.0)) ( *  ( +  ( +  sym106 0.05025089159607887) sym106) 10.123290286021858)) ( *  ( +  ( +  sym107 -0.012049608863890171) sym107) 0.0)) ( *  ( +  ( +  sym108 0.0088262390345335) sym108) 0.0)) ( *  ( +  ( +  sym109 0.03462183475494385) sym109) 0.0)) ( *  ( +  ( +  sym110 0.052557382732629776) sym110) 0.0)) ( *  ( +  ( +  sym111 0.017477916553616524) sym111) 0.0)) ( *  ( +  ( +  sym112 -0.01811525784432888) sym112) 0.0)) ( *  ( +  ( +  sym113 -0.051381342113018036) sym113) 0.12082960954489169)) ( *  ( +  ( +  sym114 -0.03322506323456764) sym114) 0.0)) ( *  ( +  ( +  sym115 0.005686549469828606) sym115) 14.62549532075172)) ( *  ( +  ( +  sym116 0.0648612380027771) sym116) 0.0)) ( *  ( +  ( +  sym117 -0.04737545922398567) sym117) 8.293406355662988)) ( *  ( +  ( +  sym118 0.022226111963391304) sym118) 0.0)) ( *  ( +  ( +  sym119 0.014066072180867195) sym119) 17.4432115660286)) ( *  ( +  ( +  sym120 -0.017287684604525566) sym120) 0.0)) ( *  ( +  ( +  sym121 0.020183155313134193) sym121) 1.8895386629031046)) ( *  ( +  ( +  sym122 -0.029219975695014) sym122) 0.41868199291668173)) ( *  ( +  ( +  sym123 -0.030847720801830292) sym123) 12.104982589977864)) ( *  ( +  ( +  sym124 -0.007797866128385067) sym124) 0.0)) ( *  ( +  ( +  sym125 -0.04631427302956581) sym125) 0.0)) ( *  ( +  ( +  sym126 -0.03848372399806976) sym126) 6.868870765213873)) ( *  ( +  ( +  sym127 -0.058774057775735855) sym127) 0.0))\n" + 
			"-5.358644753752422\n" + 
			"-2.6495959865130727\n";
	public static void main(String[] args) throws  Exception {
		String inputFile = DNNt.path+"inputs\\inn75.txt";
		File file = new File(inputFile); 
		BufferedReader br = new BufferedReader(new FileReader(file)); 
		double[][][] a = new double[IMG_HEIGHT][IMG_WIDTH][1];
		String st;
		while ((st = br.readLine()) != null) {
			String[] values = st.split(",");
			int index = 0;
			while (index < values.length) {
				for (int i = 0; i <  IMG_HEIGHT; i++)
					for (int j = 0; j < IMG_WIDTH; j++)
						for (int k = 0; k < 1; k++)
						{
							Double val = Double.valueOf(values[index]);
							index++;
							a[i][j][k] = (double)(val);
						}
			}
		}
		int original=0;
		mnist0.DNNt model = new mnist0.DNNt();    
		if(original==1) {
			System.out.println("OLD IMPLEMENTATION");
			DNN.readDataFromFiles(DNNt.path+"params\\");
			model.biases0 = DNN.getBiases0();
			model.biases2 = DNN.getBiases2();
			model.biases6 = DNN.getBiases6();
			model.biases8 = DNN.getBiases8();
			model.weights0 = DNN.getWeights0();
			model.weights2 = DNN.getWeights2();
			model.weights6 = DNN.getWeights6();
			model.weights8 = DNN.getWeights8();
		}
		else
		{
			System.out.println("NEW IMPLEMENTATION");
			DNNGeneralize.readDataFromFiles(DNNt.path+"params\\",DNNt.path+"mnist0.json");
			model.biases0 = (double[]) DNNGeneralize.get_data("biases0");
			model.biases2 = (double[]) DNNGeneralize.get_data("biases2");
			model.biases6 = (double[]) DNNGeneralize.get_data("biases6");
			model.biases8 = (double[]) DNNGeneralize.get_data("biases8");
			model.weights0 = (double[][][][]) DNNGeneralize.get_data("weights0");
			model.weights2 = (double[][][][]) DNNGeneralize.get_data("weights2");
			model.weights6 = (double[][]) DNNGeneralize.get_data("weights6");
			model.weights8 = (double[][]) DNNGeneralize.get_data("weights8");
		}
		int label = model.run(a,7);
		System.out.println(DNNt.generatedconstraints);
		assert(DNNt.generatedconstraints.equals(originalconstraints));
		System.out.println("Test 7 Passed");
	}
}
