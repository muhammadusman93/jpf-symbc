package mnist0;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import gov.nasa.jpf.symbc.Debug;
import gov.nasa.jpf.symbc.DNN;
import gov.nasa.jpf.symbc.DNNDataGeneralize;
import gov.nasa.jpf.symbc.DNNGeneralize;
public class SymbolicDriver5 {
	static final int IMG_HEIGHT = 28;
	static final int IMG_WIDTH = 28; 
	static String originalconstraints="-8.545445385493899\n" + 
			"-7.233401722215937\n" + 
			"-4.88718208566484\n" + 
			"-0.7044919413157952\n" + 
			"4.822283428696702\n" + 
			sym0 -0.03175511583685875) sym0) 5.573205013813003) 0.01564597710967064) ( *  ( +  ( +  sym1 -0.03745085746049881) sym1) 7.628469694686938)) ( *  ( +  ( +  sym2 -0.01140590663999319) sym2) 4.717654750617991)) ( *  ( +  ( +  sym3 -0.041016340255737305) sym3) 3.1101155007309615)) ( *  ( +  ( +  sym4 0.000465463584987447) sym4) 6.050755180370926)) ( *  ( +  ( +  sym5 0.03383937478065491) sym5) 2.6512357903932213)) ( *  ( +  ( +  sym6 0.035566601902246475) sym6) 0.0)) ( *  ( +  ( +  sym7 0.04337674751877785) sym7) 0.0)) ( *  ( +  ( +  sym8 0.002217571716755629) sym8) 18.246132786523706)) ( *  ( +  ( +  sym9 0.05555187538266182) sym9) 0.0)) ( *  ( +  ( +  sym10 0.06574121117591858) sym10) 0.28071137844030514)) ( *  ( +  ( +  sym11 -0.022587930783629417) sym11) 0.37693579359500795)) ( *  ( +  ( +  sym12 -0.040816258639097214) sym12) 0.0)) ( *  ( +  ( +  sym13 -0.008407823741436005) sym13) 0.0)) ( *  ( +  ( +  sym14 -0.006687548011541367) sym14) 0.0)) ( *  ( +  ( +  sym15 0.03733719140291214) sym15) 0.0)) ( *  ( +  ( +  sym16 0.034207627177238464) sym16) 6.557452043276211)) ( *  ( +  ( +  sym17 -0.04639744758605957) sym17) 7.819154448834497)) ( *  ( +  ( +  sym18 0.011382652446627617) sym18) 12.034088663560253)) ( *  ( +  ( +  sym19 -0.030282216146588326) sym19) 12.076903914548616)) ( *  ( +  ( +  sym20 -0.0772617906332016) sym20) 0.0)) ( *  ( +  ( +  sym21 0.03249327093362808) sym21) 0.0)) ( *  ( +  ( +  sym22 -0.05563979223370552) sym22) 0.0)) ( *  ( +  ( +  sym23 0.01139342412352562) sym23) 16.552821960079726)) ( *  ( +  ( +  sym24 -0.03904566541314125) sym24) 7.471020714045041)) ( *  ( +  ( +  sym25 -0.003703913418576121) sym25) 2.6983943054160195)) ( *  ( +  ( +  sym26 0.04263530671596527) sym26) 9.306257146375186)) ( *  ( +  ( +  sym27 -0.06342890858650208) sym27) 0.0)) ( *  ( +  ( +  sym28 0.011744380928575993) sym28) 0.0)) ( *  ( +  ( +  sym29 -0.05677739158272743) sym29) 0.0)) ( *  ( +  ( +  sym30 -0.023732231929898262) sym30) 7.92595377480877)) ( *  ( +  ( +  sym31 0.000987659324891865) sym31) 15.490190881392763)) ( *  ( +  ( +  sym32 -0.05455109104514122) sym32) 5.8495763888901)) ( *  ( +  ( +  sym33 0.0702800303697586) sym33) 8.332985889341618)) ( *  ( +  ( +  sym34 0.02573303133249283) sym34) 0.0)) ( *  ( +  ( +  sym35 -0.03164425119757652) sym35) 7.434186606139759)) ( *  ( +  ( +  sym36 0.06155744567513466) sym36) 26.047762416887853)) ( *  ( +  ( +  sym37 -0.04370249807834625) sym37) 14.345630383566784)) ( *  ( +  ( +  sym38 -0.037268590182065964) sym38) 0.0)) ( *  ( +  ( +  sym39 0.0376833938062191) sym39) 5.737446464307298)) ( *  ( +  ( +  sym40 -0.1455059051513672) sym40) 10.89783568526306)) ( *  ( +  ( +  sym41 0.03273022174835205) sym41) 0.0)) ( *  ( +  ( +  sym42 0.013409354723989964) sym42) 0.0)) ( *  ( +  ( +  sym43 0.029980747029185295) sym43) 15.916916191236762)) ( *  ( +  ( +  sym44 -0.005695476662367582) sym44) 6.2706174770125855)) ( *  ( +  ( +  sym45 -0.04453611001372337) sym45) 2.7645153175442716)) ( *  ( +  ( +  sym46 0.015572529286146164) sym46) 0.4263502528652117)) ( *  ( +  ( +  sym47 0.060011956840753555) sym47) 0.0)) ( *  ( +  ( +  sym48 -0.06043529137969017) sym48) 0.49713950257451245)) ( *  ( +  ( +  sym49 0.010421470738947392) sym49) 3.170859699213959)) ( *  ( +  ( +  sym50 0.020509876310825348) sym50) 0.0)) ( *  ( +  ( +  sym51 0.03568738326430321) sym51) 0.0)) ( *  ( +  ( +  sym52 0.09766153246164322) sym52) 5.961968640668489)) ( *  ( +  ( +  sym53 0.028942925855517387) sym53) 0.0)) ( *  ( +  ( +  sym54 0.045484211295843124) sym54) 0.8037915323855642)) ( *  ( +  ( +  sym55 -0.019476424902677536) sym55) 0.0)) ( *  ( +  ( +  sym56 -0.03963084891438484) sym56) 0.0)) ( *  ( +  ( +  sym57 -0.06849151849746704) sym57) 6.149445585345512)) ( *  ( +  ( +  sym58 -0.056747425347566605) sym58) 0.0)) ( *  ( +  ( +  sym59 -0.012493536807596684) sym59) 0.0)) ( *  ( +  ( +  sym60 -0.04928061366081238) sym60) 0.0)) ( *  ( +  ( +  sym61 -0.04455210268497467) sym61) 0.0)) ( *  ( +  ( +  sym62 -0.06948409229516983) sym62) 0.0)) ( *  ( +  ( +  sym63 -0.02004203200340271) sym63) 6.428796676980755)) ( *  ( +  ( +  sym64 0.040695954114198685) sym64) 0.0)) ( *  ( +  ( +  sym65 -0.0287201888859272) sym65) 0.13204900667910754)) ( *  ( +  ( +  sym66 -0.058106016367673874) sym66) 4.8676519138935666)) ( *  ( +  ( +  sym67 0.04132110998034477) sym67) 0.0)) ( *  ( +  ( +  sym68 0.029813222587108612) sym68) 8.833616891343448)) ( *  ( +  ( +  sym69 -0.05877222865819931) sym69) 0.0)) ( *  ( +  ( +  sym70 0.001664378447458148) sym70) 0.0)) ( *  ( +  ( +  sym71 0.049722421914339066) sym71) 21.18382513770484)) ( *  ( +  ( +  sym72 0.019383981823921204) sym72) 0.0)) ( *  ( +  ( +  sym73 -0.013350589200854301) sym73) 0.0)) ( *  ( +  ( +  sym74 -0.0529831200838089) sym74) 3.8617419773748964)) ( *  ( +  ( +  sym75 -0.017491543665528297) sym75) 0.5707127088387486)) ( *  ( +  ( +  sym76 0.054346583783626556) sym76) 3.37625388693369)) ( *  ( +  ( +  sym77 0.003184410044923425) sym77) 0.0)) ( *  ( +  ( +  sym78 0.005461653228849173) sym78) 5.739083929772478)) ( *  ( +  ( +  sym79 -0.007841307669878006) sym79) 9.63486066930181)) ( *  ( +  ( +  sym80 0.036025095731019974) sym80) 14.533268592730298)) ( *  ( +  ( +  sym81 -0.003541789250448346) sym81) 2.9739218951150077)) ( *  ( +  ( +  sym82 0.03308442234992981) sym82) 9.808887505703758)) ( *  ( +  ( +  sym83 -0.000229934346862137) sym83) 0.0)) ( *  ( +  ( +  sym84 0.030154382809996605) sym84) 1.446178389142193)) ( *  ( +  ( +  sym85 0.05782567709684372) sym85) 17.942570719295006)) ( *  ( +  ( +  sym86 -0.08370749652385712) sym86) 0.0)) ( *  ( +  ( +  sym87 0.01260415744036436) sym87) 0.0)) ( *  ( +  ( +  sym88 0.07638806849718094) sym88) 0.0)) ( *  ( +  ( +  sym89 -0.007011403329670429) sym89) 0.0)) ( *  ( +  ( +  sym90 0.006272550206631422) sym90) 0.0)) ( *  ( +  ( +  sym91 0.04747560992836952) sym91) 0.0)) ( *  ( +  ( +  sym92 0.04805362597107887) sym92) 0.0)) ( *  ( +  ( +  sym93 -0.02620997279882431) sym93) 2.900778356460622)) ( *  ( +  ( +  sym94 0.011903407983481884) sym94) 0.0)) ( *  ( +  ( +  sym95 -0.050383131951093674) sym95) 0.0)) ( *  ( +  ( +  sym96 -0.08710235357284546) sym96) 0.0)) ( *  ( +  ( +  sym97 0.06469619274139404) sym97) 0.0)) ( *  ( +  ( +  sym98 0.027789339423179626) sym98) 0.0)) ( *  ( +  ( +  sym99 -0.010012855753302574) sym99) 2.494674054124086)) ( *  ( +  ( +  sym100 0.021976318210363388) sym100) 16.575179721356264)) ( *  ( +  ( +  sym101 -0.050438884645700455) sym101) 0.0)) ( *  ( +  ( +  sym102 -0.023395460098981857) sym102) 0.0)) ( *  ( +  ( +  sym103 0.033149220049381256) sym103) 0.0)) ( *  ( +  ( +  sym104 -0.038637369871139526) sym104) 0.0)) ( *  ( +  ( +  sym105 -0.020661048591136932) sym105) 4.794959617757446)) ( *  ( +  ( +  sym106 0.01981292851269245) sym106) 11.99150271003245)) ( *  ( +  ( +  sym107 -0.05194714665412903) sym107) 0.0)) ( *  ( +  ( +  sym108 -0.003374341409653425) sym108) 0.0)) ( *  ( +  ( +  sym109 -0.006170320324599743) sym109) 0.0)) ( *  ( +  ( +  sym110 0.037307318300008774) sym110) 0.0)) ( *  ( +  ( +  sym111 0.04255562648177147) sym111) 0.0)) ( *  ( +  ( +  sym112 0.024609366431832314) sym112) 0.0)) ( *  ( +  ( +  sym113 0.06790847331285477) sym113) 7.9324645120768595)) ( *  ( +  ( +  sym114 0.018882090225815773) sym114) 10.062861747551278)) ( *  ( +  ( +  sym115 0.01522097084671259) sym115) 4.953073351649041)) ( *  ( +  ( +  sym116 -0.04605954512953758) sym116) 0.0)) ( *  ( +  ( +  sym117 0.03897247463464737) sym117) 8.875734941681536)) ( *  ( +  ( +  sym118 0.017071625217795372) sym118) 0.0)) ( *  ( +  ( +  sym119 -0.026354020461440086) sym119) 12.412856641203227)) ( *  ( +  ( +  sym120 -0.04063824564218521) sym120) 0.0)) ( *  ( +  ( +  sym121 -0.06495862454175949) sym121) 0.0)) ( *  ( +  ( +  sym122 -0.002344558015465736) sym122) 0.0)) ( *  ( +  ( +  sym123 -0.014259898103773594) sym123) 19.043765263717546)) ( *  ( +  ( +  sym124 0.015184407122433186) sym124) 7.922816810109512)) ( *  ( +  ( +  sym125 0.03838479518890381) sym125) 0.0)) ( *  ( +  ( +  sym126 0.042788855731487274) sym126) 11.247033750883176)) ( *  ( +  ( +  sym127 0.003896101843565702) sym127) 3.9067507156257766))\n" + 
			"1.75584190567495\n" + 
			"-8.640704872565657\n" + 
			"-2.3979944267392983\n" + 
			"0.8746054170945982\n";
	public static void main(String[] args) throws  Exception {
		String inputFile = DNNt.path+"inputs\\inn55.txt";
		File file = new File(inputFile); 
		BufferedReader br = new BufferedReader(new FileReader(file)); 
		double[][][] a = new double[IMG_HEIGHT][IMG_WIDTH][1];
		String st;
		while ((st = br.readLine()) != null) {
			String[] values = st.split(",");
			int index = 0;
			while (index < values.length) {
				for (int i = 0; i <  IMG_HEIGHT; i++)
					for (int j = 0; j < IMG_WIDTH; j++)
						for (int k = 0; k < 1; k++)
						{
							Double val = Double.valueOf(values[index]);
							index++;
							a[i][j][k] = (double)(val);
						}
			}
		}
		int original=0;
		mnist0.DNNt model = new mnist0.DNNt();    
		if(original==1) {
			System.out.println("OLD IMPLEMENTATION");
			DNN.readDataFromFiles(DNNt.path+"params\\");
			model.biases0 = DNN.getBiases0();
			model.biases2 = DNN.getBiases2();
			model.biases6 = DNN.getBiases6();
			model.biases8 = DNN.getBiases8();
			model.weights0 = DNN.getWeights0();
			model.weights2 = DNN.getWeights2();
			model.weights6 = DNN.getWeights6();
			model.weights8 = DNN.getWeights8();
		}
		else
		{
			System.out.println("NEW IMPLEMENTATION");
			DNNGeneralize.readDataFromFiles(DNNt.path+"params\\",DNNt.path+"mnist0.json");
			model.biases0 = (double[]) DNNGeneralize.get_data("biases0");
			model.biases2 = (double[]) DNNGeneralize.get_data("biases2");
			model.biases6 = (double[]) DNNGeneralize.get_data("biases6");
			model.biases8 = (double[]) DNNGeneralize.get_data("biases8");
			model.weights0 = (double[][][][]) DNNGeneralize.get_data("weights0");
			model.weights2 = (double[][][][]) DNNGeneralize.get_data("weights2");
			model.weights6 = (double[][]) DNNGeneralize.get_data("weights6");
			model.weights8 = (double[][]) DNNGeneralize.get_data("weights8");
		}
		int label = model.run(a,5);
		System.out.println(DNNt.generatedconstraints);
		assert(DNNt.generatedconstraints.equals(originalconstraints));
		System.out.println("Test 5 Passed");
	}
}
