package mnist0;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import gov.nasa.jpf.symbc.Debug;
import gov.nasa.jpf.symbc.DNN;
import gov.nasa.jpf.symbc.DNNDataGeneralize;
import gov.nasa.jpf.symbc.DNNGeneralize;
public class SymbolicDriver0 {
	static final int IMG_HEIGHT = 28;
	static final int IMG_WIDTH = 28; 
	static String originalconstraintssym0 0.07434333860874176) sym0) 16.128962804074106) -0.007141519337892532) ( *  ( +  ( +  sym1 0.00822078250348568) sym1) 0.0)) ( *  ( +  ( +  sym2 -0.010190033353865147) sym2) 2.5513631185457486)) ( *  ( +  ( +  sym3 0.036890048533678055) sym3) 0.0)) ( *  ( +  ( +  sym4 0.030582258477807045) sym4) 0.0)) ( *  ( +  ( +  sym5 0.03859013691544533) sym5) 24.036815178800037)) ( *  ( +  ( +  sym6 0.007555732037872076) sym6) 0.0)) ( *  ( +  ( +  sym7 0.04186504706740379) sym7) 0.0)) ( *  ( +  ( +  sym8 -0.04893879219889641) sym8) 9.39964597860507)) ( *  ( +  ( +  sym9 -0.015114430338144302) sym9) 5.2324028362463535)) ( *  ( +  ( +  sym10 0.05010062828660011) sym10) 0.0)) ( *  ( +  ( +  sym11 0.030225155875086784) sym11) 2.6531360749105573)) ( *  ( +  ( +  sym12 0.014964243397116661) sym12) 0.0)) ( *  ( +  ( +  sym13 0.001111329882405698) sym13) 13.640293801719803)) ( *  ( +  ( +  sym14 0.012738572433590889) sym14) 0.0)) ( *  ( +  ( +  sym15 -0.033607400953769684) sym15) 0.0)) ( *  ( +  ( +  sym16 0.018658308312296867) sym16) 8.590827347501016)) ( *  ( +  ( +  sym17 -0.03267458826303482) sym17) 4.684506060229873)) ( *  ( +  ( +  sym18 0.03763354569673538) sym18) 13.000123571913564)) ( *  ( +  ( +  sym19 -0.029752422124147415) sym19) 0.0)) ( *  ( +  ( +  sym20 -0.035339124500751495) sym20) 0.0)) ( *  ( +  ( +  sym21 0.05679275095462799) sym21) 0.0)) ( *  ( +  ( +  sym22 -0.05433126911520958) sym22) 0.0)) ( *  ( +  ( +  sym23 -0.06765799969434738) sym23) 9.28165521189715)) ( *  ( +  ( +  sym24 0.006718275137245655) sym24) 7.0561536428399325)) ( *  ( +  ( +  sym25 0.004002058412879705) sym25) 0.0)) ( *  ( +  ( +  sym26 0.03812190517783165) sym26) 0.0)) ( *  ( +  ( +  sym27 0.04671851173043251) sym27) 2.554913093400256)) ( *  ( +  ( +  sym28 0.016753146424889565) sym28) 7.363410862652063)) ( *  ( +  ( +  sym29 -0.01805504970252514) sym29) 0.0)) ( *  ( +  ( +  sym30 0.02599620819091797) sym30) 9.331540118477548)) ( *  ( +  ( +  sym31 -0.05142691731452942) sym31) 5.396761864649711)) ( *  ( +  ( +  sym32 -0.010493416339159012) sym32) 0.0)) ( *  ( +  ( +  sym33 0.001505819149315357) sym33) 0.5974238737265859)) ( *  ( +  ( +  sym34 -0.04947623610496521) sym34) 0.8113189133165344)) ( *  ( +  ( +  sym35 -0.05455557629466057) sym35) 1.8169602647905907)) ( *  ( +  ( +  sym36 -0.024905692785978317) sym36) 0.0)) ( *  ( +  ( +  sym37 0.04257256165146828) sym37) 15.0387460407314)) ( *  ( +  ( +  sym38 0.04137241467833519) sym38) 0.0)) ( *  ( +  ( +  sym39 -0.002935092430561781) sym39) 4.289677566761156)) ( *  ( +  ( +  sym40 0.03327014297246933) sym40) 0.0)) ( *  ( +  ( +  sym41 -0.029617121443152428) sym41) 0.0)) ( *  ( +  ( +  sym42 0.001673331134952605) sym42) 0.0)) ( *  ( +  ( +  sym43 -0.07348233461380005) sym43) 6.064458926674006)) ( *  ( +  ( +  sym44 -0.05486644431948662) sym44) 1.1071926150593565)) ( *  ( +  ( +  sym45 -0.006012360565364361) sym45) 0.0)) ( *  ( +  ( +  sym46 0.031568121165037155) sym46) 0.0)) ( *  ( +  ( +  sym47 0.08202194422483444) sym47) 0.0)) ( *  ( +  ( +  sym48 -0.04240523651242256) sym48) 0.0)) ( *  ( +  ( +  sym49 -0.058051325380802155) sym49) 0.7099127804022443)) ( *  ( +  ( +  sym50 0.03325041010975838) sym50) 0.0)) ( *  ( +  ( +  sym51 -0.01820918545126915) sym51) 0.0)) ( *  ( +  ( +  sym52 -0.10743936896324158) sym52) 0.0)) ( *  ( +  ( +  sym53 -0.011499947868287563) sym53) 0.0)) ( *  ( +  ( +  sym54 0.030375856906175613) sym54) 4.43851938869125)) ( *  ( +  ( +  sym55 0.016902685165405273) sym55) 0.0)) ( *  ( +  ( +  sym56 0.02281099744141102) sym56) 0.0)) ( *  ( +  ( +  sym57 -0.02063506469130516) sym57) 0.0)) ( *  ( +  ( +  sym58 0.030615339055657387) sym58) 0.0)) ( *  ( +  ( +  sym59 -0.012191371992230415) sym59) 0.0)) ( *  ( +  ( +  sym60 -0.018571261316537857) sym60) 0.0)) ( *  ( +  ( +  sym61 -0.049077264964580536) sym61) 0.0)) ( *  ( +  ( +  sym62 0.04038713499903679) sym62) 0.0)) ( *  ( +  ( +  sym63 0.000065737040131353) sym63) 7.2538350041546265)) ( *  ( +  ( +  sym64 -0.09022265672683716) sym64) 0.9931560638876995)) ( *  ( +  ( +  sym65 -0.04061562940478325) sym65) 0.4333658448049118)) ( *  ( +  ( +  sym66 0.002564697293564677) sym66) 3.5882670662865634)) ( *  ( +  ( +  sym67 0.014275920577347279) sym67) 0.0)) ( *  ( +  ( +  sym68 -0.02929440699517727) sym68) 0.0)) ( *  ( +  ( +  sym69 0.042228035628795624) sym69) 0.0)) ( *  ( +  ( +  sym70 0.012013580650091171) sym70) 0.0)) ( *  ( +  ( +  sym71 -0.05775598809123039) sym71) 17.36040613964701)) ( *  ( +  ( +  sym72 0.002881207969039679) sym72) 0.0)) ( *  ( +  ( +  sym73 -0.01058257557451725) sym73) 0.0)) ( *  ( +  ( +  sym74 -0.03492094576358795) sym74) 0.0)) ( *  ( +  ( +  sym75 0.031178832054138184) sym75) 0.8005537142343893)) ( *  ( +  ( +  sym76 -0.006449304521083832) sym76) 0.0)) ( *  ( +  ( +  sym77 0.034412503242492676) sym77) 0.0)) ( *  ( +  ( +  sym78 -0.07674290984869003) sym78) 0.0)) ( *  ( +  ( +  sym79 -0.054732006043195724) sym79) 0.5803218822678007)) ( *  ( +  ( +  sym80 -0.01044996827840805) sym80) 6.230918211799254)) ( *  ( +  ( +  sym81 0.018565235659480095) sym81) 0.0)) ( *  ( +  ( +  sym82 0.016867604106664658) sym82) 0.0)) ( *  ( +  ( +  sym83 -0.003531544469296932) sym83) 0.0)) ( *  ( +  ( +  sym84 -0.03682306036353111) sym84) 0.0)) ( *  ( +  ( +  sym85 -0.061882585287094116) sym85) 8.010239168065404)) ( *  ( +  ( +  sym86 0.02337014302611351) sym86) 0.0)) ( *  ( +  ( +  sym87 0.007436166983097792) sym87) 0.0)) ( *  ( +  ( +  sym88 0.06584373116493225) sym88) 0.0)) ( *  ( +  ( +  sym89 -0.030051009729504585) sym89) 0.0)) ( *  ( +  ( +  sym90 -0.02890528179705143) sym90) 0.0)) ( *  ( +  ( +  sym91 0.025518197566270828) sym91) 0.0)) ( *  ( +  ( +  sym92 -0.010609155520796776) sym92) 0.0)) ( *  ( +  ( +  sym93 0.052388615906238556) sym93) 12.362759400999177)) ( *  ( +  ( +  sym94 -0.011982291005551815) sym94) 0.0)) ( *  ( +  ( +  sym95 -0.005417856853455305) sym95) 0.0)) ( *  ( +  ( +  sym96 0.002843077294528484) sym96) 0.0)) ( *  ( +  ( +  sym97 0.013072830624878407) sym97) 11.331228603785641)) ( *  ( +  ( +  sym98 -0.03518199920654297) sym98) 0.0)) ( *  ( +  ( +  sym99 0.04269733279943466) sym99) 0.0)) ( *  ( +  ( +  sym100 0.055215757340192795) sym100) 25.623402598591575)) ( *  ( +  ( +  sym101 0.06737455725669861) sym101) 0.0)) ( *  ( +  ( +  sym102 -0.07190454006195068) sym102) 0.0)) ( *  ( +  ( +  sym103 -0.005092890001833439) sym103) 0.0)) ( *  ( +  ( +  sym104 0.06452945619821548) sym104) 13.109135941932136)) ( *  ( +  ( +  sym105 -0.054381802678108215) sym105) 0.0)) ( *  ( +  ( +  sym106 -0.06448578834533691) sym106) 1.286869060084694)) ( *  ( +  ( +  sym107 0.001740469015203416) sym107) 0.0)) ( *  ( +  ( +  sym108 -0.03179622441530228) sym108) 0.0)) ( *  ( +  ( +  sym109 0.04497799649834633) sym109) 0.0)) ( *  ( +  ( +  sym110 -0.011695611290633678) sym110) 0.0)) ( *  ( +  ( +  sym111 -0.0364982970058918) sym111) 0.0)) ( *  ( +  ( +  sym112 0.029890500009059906) sym112) 0.0)) ( *  ( +  ( +  sym113 -0.04660343751311302) sym113) 2.672488691567741)) ( *  ( +  ( +  sym114 0.046857744455337524) sym114) 0.3494445641277664)) ( *  ( +  ( +  sym115 0.003606189275160432) sym115) 0.0)) ( *  ( +  ( +  sym116 0.05601142346858978) sym116) 21.285012566990492)) ( *  ( +  ( +  sym117 0.02152012661099434) sym117) 8.463466833579291)) ( *  ( +  ( +  sym118 0.03818627819418907) sym118) 0.0)) ( *  ( +  ( +  sym119 -0.000185887343832292) sym119) 7.599275087509519)) ( *  ( +  ( +  sym120 -0.028897255659103394) sym120) 0.0)) ( *  ( +  ( +  sym121 0.005976107902824879) sym121) 0.0)) ( *  ( +  ( +  sym122 -0.0213279090821743) sym122) 0.0)) ( *  ( +  ( +  sym123 -0.07993847876787186) sym123) 7.856523087443282)) ( *  ( +  ( +  sym124 -0.02402794547379017) sym124) 4.079786456645971)) ( *  ( +  ( +  sym125 0.04345547780394554) sym125) 0.0)) ( *  ( +  ( +  sym126 0.026707977056503296) sym126) 8.537954321828794)) ( *  ( +  ( +  sym127 0.02162761799991131) sym127) 0.0))\n" + 
			"-7.505839557751925\n" + 
			"-1.5840865007776945\n" + 
			"-5.490574937912324\n" + 
			"-0.3600949292347832\n" + 
			"1.432357087287221\n" + 
			"4.487050090325247\n" + 
			"-0.7566939921948015\n" + 
			"-3.460394385680734\n" + 
			"1.2804490000203548\n";
	public static void main(String[] args) throws  Exception {
		String inputFile = DNNt.path+"inputs\\inn05.txt";
		File file = new File(inputFile); 
		BufferedReader br = new BufferedReader(new FileReader(file)); 
		double[][][] a = new double[IMG_HEIGHT][IMG_WIDTH][1];
		String st;
		while ((st = br.readLine()) != null) {
			String[] values = st.split(",");
			int index = 0;
			while (index < values.length) {
				for (int i = 0; i <  IMG_HEIGHT; i++)
					for (int j = 0; j < IMG_WIDTH; j++)
						for (int k = 0; k < 1; k++)
						{
							Double val = Double.valueOf(values[index]);
							index++;
							a[i][j][k] = (double)(val);
						}
			}
		}
		int original=0;
		mnist0.DNNt model = new mnist0.DNNt();    
		if(original==1) {
			System.out.println("OLD IMPLEMENTATION");
			DNN.readDataFromFiles(DNNt.path+"params\\");
			model.biases0 = DNN.getBiases0();
			model.biases2 = DNN.getBiases2();
			model.biases6 = DNN.getBiases6();
			model.biases8 = DNN.getBiases8();
			model.weights0 = DNN.getWeights0();
			model.weights2 = DNN.getWeights2();
			model.weights6 = DNN.getWeights6();
			model.weights8 = DNN.getWeights8();
		}
		else
		{
			System.out.println("NEW IMPLEMENTATION");
			DNNGeneralize.readDataFromFiles(DNNt.path+"params\\",DNNt.path+"mnist0.json");
			model.biases0 = (double[]) DNNGeneralize.get_data("biases0");
			model.biases2 = (double[]) DNNGeneralize.get_data("biases2");
			model.biases6 = (double[]) DNNGeneralize.get_data("biases6");
			model.biases8 = (double[]) DNNGeneralize.get_data("biases8");
			model.weights0 = (double[][][][]) DNNGeneralize.get_data("weights0");
			model.weights2 = (double[][][][]) DNNGeneralize.get_data("weights2");
			model.weights6 = (double[][]) DNNGeneralize.get_data("weights6");
			model.weights8 = (double[][]) DNNGeneralize.get_data("weights8");
		}
		int label = model.run(a,0);
		System.out.println(DNNt.generatedconstraints);
		assert(DNNt.generatedconstraints.equals(originalconstraints));
		System.out.println("Test 0 Passed");
	}
}
